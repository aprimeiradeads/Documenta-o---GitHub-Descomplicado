{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Curso GitHub Descomplicado","text":""},{"location":"#apresentacao-do-curso","title":"Apresenta\u00e7\u00e3o do Curso","text":"<p>Slide Completo do Curso</p> <p>Acesse aqui!</p> <p>Bem-vindo(a)! \u00c9 um prazer ter voc\u00ea participando do nosso curso &lt;3</p> <p>O curso GitHub Descomplicado \u00e9 um projeto de extens\u00e3o oferecido pela Turma 4A do curso de An\u00e1lise e Desenvolvimento de Sistemas do IFSul de Sapucaia.</p> <p></p> <p>Voc\u00ea pode nos conhecer melhor atrav\u00e9s do instagram @aprimeirdadeads.</p> <p>As aulas do curso ocorrer\u00e3o nos dias 4, 6, 11 e 13 de novembro, das 19h \u00e0s 20h30, e ser\u00e3o de forma online.</p> <p>Ao final do curso, ser\u00e1 entregue um certificado de 10h aos alunos que participarem de, no m\u00ednimo, 75% das aulas (3 aulas) e entregarem o link de uma GitHub Page feita no seu reposit\u00f3rio.</p>"},{"location":"#documentacao","title":"Documenta\u00e7\u00e3o","text":"<p>Esta GitHub Page \u00e9 a documenta\u00e7\u00e3o do curso GitHub Descomplicado. </p> <p>Aqui voc\u00ea ter\u00e1 acesso ao material de todas as aulas e aos links que foram utilizados.</p> <p>Em caso de qualquer d\u00favida, entre em contato com a gente em nossa comunidade do whatsapp (o link da comunidade foi enviado aos inscritos do curso atrav\u00e9s do email) &lt;3</p> <p>Note</p> <p>O material de cada aula ser\u00e1 liberado aqui na p\u00e1gina no dia em que a aula for ocorrer.</p>"},{"location":"aula01/apresentacao/","title":"Apresenta\u00e7\u00e3o da Aula","text":"<p>O objetivo desta aula \u00e9 introduzir o que \u00e9 controle de vers\u00e3o e, em seguida, apresentar o Git e o Github. Conceitos importantes ser\u00e3o explicados e haver\u00e1 auxilio para o primeiro contato com as plataformas. </p>"},{"location":"aula01/apresentacao/#ministrantes","title":"Ministrantes","text":"Papel Apresenta\u00e7\u00e3o Nome Professora Bruna B\u00f6ch Professora Michelle Moderadores Eduardo, Diego e Nicoly <p>Note</p> <p>No nome de cada professor/moderador est\u00e1 o link para o LinkedIn deles, caso queiram se conectar &lt;3 </p>"},{"location":"aula01/apresentacao/#ferramentas-necessarias","title":"Ferramentas Necess\u00e1rias","text":"<p>Para que o aproveitamento da aula seja o m\u00e1ximo, \u00e9 necess\u00e1rio que o aluno acompanhe as pr\u00e1ticas que ser\u00e3o realizadas. Assim, sugerimos que o aluno possua as seguintes ferramentas durante a aula:</p> <ul> <li>Computador/Notebook;</li> <li>Internet.</li> </ul>"},{"location":"aula01/conteudo/","title":"Conte\u00fado","text":"<p>Clique aqui para acessar a grava\u00e7\u00e3o da aula Introdu\u00e7\u00e3o ao Git e GitHub</p>"},{"location":"aula01/conteudo/#o-que-e-controle-de-versao","title":"O que \u00e9 controle de vers\u00e3o?","text":"<p>Controle de vers\u00e3o \u00e9 um sistema que registra altera\u00e7\u00f5es no desenvolvimento de software, permitindo que a equipe acesse o hist\u00f3rico de vers\u00f5es anteriores, recupere vers\u00f5es espec\u00edficas e entenda mudan\u00e7as feitas por outros. </p> <p>Ele facilita o trabalho em equipe e individual, possibilitando o registro de vers\u00f5es, codifica\u00e7\u00e3o simult\u00e2nea e integra\u00e7\u00e3o segura e documentada de trabalhos. </p> <p>Um dos sistemas mais conhecidos e utilizados para controle de vers\u00e3o \u00e9 o Git que, em conjunto com o GitHub se tornam ferramentas poderosas e pr\u00e1ticas para colabora\u00e7\u00e3o e armazenamento de projetos de software.</p> <p></p>"},{"location":"aula01/conteudo/#diferenca-entre-git-e-github","title":"Diferen\u00e7a entre Git e GitHub","text":"<p>Enquanto o Git \u00e9 uma ferramenta de controle de vers\u00e3o local, o GitHub \u00e9 uma plataforma online que permite hospedar projetos Git e colaborar com outras pessoas.</p>"},{"location":"aula01/conteudo/#principais-conceitos","title":"Principais Conceitos","text":"Reposit\u00f3rio <ul> <li>Um reposit\u00f3rio \u00e9 o elemento mais b\u00e1sico do GitHub. \u00c9 um lugar onde voc\u00ea pode armazenar seu c\u00f3digo, seus arquivos e o hist\u00f3rico de revis\u00e3o de cada arquivo. Os reposit\u00f3rios podem ter v\u00e1rios colaboradores e podem ser p\u00fablicos ou particulares. </li> </ul> Remoto e Local <ul> <li>Remoto \u00e9 o que est\u00e1 online (nuvem). Local \u00e9 o que est\u00e1 na sua m\u00e1quina</li> </ul> Branch <p>Permite que voc\u00ea isole o trabalho em diferentes linhas de desenvolvimento. Podemos usar uma branch para isolar o trabalho de desenvolvimento sem afetar outros branches no reposit\u00f3rio. Cada reposit\u00f3rio tem um branch padr\u00e3o e pode ter v\u00e1rios outros branches. Voc\u00ea pode fazer merge de um branch em outro branch usando uma pull request</p> <p>Branch Padr\u00e3o</p> <p>Quando voc\u00ea cria um reposit\u00f3rio com um conte\u00fado no GitHub, o GitHub cria o reposit\u00f3rio com uma \u00fanica ramifica\u00e7\u00e3o. Este primeiro branch no reposit\u00f3rio \u00e9 o branch-padr\u00e3o. O branch-padr\u00e3o \u00e9 o branch que GitHub exibe quando algu\u00e9m visita o seu reposit\u00f3rio. O branch padr\u00e3o \u00e9 tamb\u00e9m o branch inicial que o Git verifica localmente quando algu\u00e9m clona o reposit\u00f3rio. A menos que voc\u00ea especifique um branch diferente, o branch-padr\u00e3o em um reposit\u00f3rio \u00e9 o branch de base para novos pull requests e commits de c\u00f3digo.</p> <p>Por padr\u00e3o, o GitHub d\u00e1 ao branch padr\u00e3o o nome main em qualquer novo reposit\u00f3rio.</p> <p></p> <p>Para saber informa\u00e7\u00f5es mais detalhadas sobre branches, acesse este link.</p> Commit <ul> <li>Fazer um \u201ccheckpoint\u201d na sua m\u00e1quina.</li> </ul> <p>Os commits s\u00e3o utilizados para auxiliar o controle do versionamento e as modifica\u00e7\u00f5es de sistemas. Nas solu\u00e7\u00f5es como o Git, por exemplo, o comando commit adiciona as altera\u00e7\u00f5es mais recentes do c\u00f3digo-fonte ao reposit\u00f3rio que \u00e9 utilizado por todos os DEVs. Uma vez executado, portanto, a atualiza\u00e7\u00e3o do sistema se torna dispon\u00edvel para toda a equipe.</p> <p></p> Merge <ul> <li>Combina diferentes branches. </li> </ul> <p></p> Conflitos <ul> <li>Ocorrem quando h\u00e1 mudan\u00e7as conflitantes que precisam ser resolvidas manualmente.</li> </ul> <p></p> Clonar <ul> <li>Fazer um c\u00f3pia exata de um reposit\u00f3rio.</li> </ul> <p></p> Push e Pull <ul> <li>Push: \u00e9 usado para transferir ou enviar o commit, que \u00e9 feito em um branch local em seu computador, para um reposit\u00f3rio remoto como o GitHub.</li> </ul> <p></p> <ul> <li>Pull: \u00e9 usado para buscar e baixar conte\u00fado de reposit\u00f3rios remotos e fazer a atualiza\u00e7\u00e3o imediata ao reposit\u00f3rio local para que os conte\u00fados sejam iguais.</li> </ul> <p></p> <p>Resumindo os dois conceitos: o git pull puxa, traz as altera\u00e7\u00f5es de um reposit\u00f3rio remoto para o local. J\u00e1 push \u00e9 empurrar, ent\u00e3o o git push empurra, leva as altera\u00e7\u00f5es do reposit\u00f3rio local para o remoto</p>"},{"location":"aula01/conteudo/#organizando-e-instalando-as-ferramentas-necessarias","title":"Organizando e Instalando as Ferramentas Necess\u00e1rias","text":"<p>Durante curso iremos utilizar algumas ferramentas e, nesta etapa da aula, iremos instala-las e realizar os passos necess\u00e1rios para prepar\u00e1-las para a nossa utiliza\u00e7\u00e3o.</p> <p>Assim, reproduza os passos abaixo na sua m\u00e1quina para estar preparado para as nossas pr\u00f3ximas aulas! &lt;3</p>"},{"location":"aula01/conteudo/#criando-uma-conta-no-github","title":"Criando uma conta no GitHub","text":"<p>Clique neste link e siga o passo a passo!</p>"},{"location":"aula01/conteudo/#instalando-o-git","title":"Instalando o Git","text":"<p>Assista este v\u00eddeo com o passo a passo.</p>"},{"location":"aula01/conteudo/#instalando-o-vscode","title":"Instalando o VSCode","text":"<p>Assista este v\u00eddeo com o passo a passo.</p>"},{"location":"aula01/conteudo/#instalando-o-github-desktop","title":"Instalando o GitHub Desktop","text":"<p>Assista este v\u00eddeo com o passo a passo.</p>"},{"location":"aula01/conteudo/#de-quais-formas-eu-posso-utilizar-o-github","title":"De quais formas eu posso utilizar o GitHub","text":"<p>Voc\u00ea pode interagir com o GitHub de v\u00e1rias maneiras, dependendo da sua prefer\u00eancia por interface gr\u00e1fica ou linha de comando. Iremos abordar as tr\u00eas op\u00e7\u00f5es mais comuns: IDE's (como Visual Studio Code), terminal e o GitHub Desktop.</p>"},{"location":"aula01/conteudo/#ides-ambientes-de-desenvolvimento-integrados","title":"IDE's (Ambientes de Desenvolvimento Integrados)","text":"<p>Muitas IDEs modernas, como Visual Studio Code, IntelliJ IDEA e PyCharm, t\u00eam integra\u00e7\u00e3o com o Git e o GitHub, permitindo que voc\u00ea trabalhe de maneira eficiente e visual com reposit\u00f3rios GitHub. Veja como elas funcionam com GitHub:</p> <ul> <li>Clonar Reposit\u00f3rios: Voc\u00ea pode clonar reposit\u00f3rios diretamente dentro da IDE, sem precisar sair dela.</li> <li>Commit e Push: As IDEs permitem que voc\u00ea adicione, comite e envie (push) suas altera\u00e7\u00f5es para o GitHub com cliques de bot\u00e3o, simplificando o fluxo de trabalho.</li> <li>Branches e Merge: Ferramentas de gerenciamento de branches facilitam a cria\u00e7\u00e3o, troca e o merge de branches.</li> <li>Pull Requests: Algumas IDEs, como o Visual Studio Code, permitem revisar e criar pull requests direto da interface, o que \u00e9 \u00fatil para projetos colaborativos.</li> </ul> <p>Essas funcionalidades tornam o trabalho com Git e GitHub mais visual e intuitivo, especialmente para desenvolvedores que preferem n\u00e3o usar o terminal.</p> <p>OBS.: em nosso curso iremos utilizar o Visual Studio Code</p>"},{"location":"aula01/conteudo/#terminal","title":"Terminal","text":"<p>O terminal (ou linha de comando) \u00e9 uma maneira poderosa e flex\u00edvel de interagir com o GitHub, especialmente para desenvolvedores que preferem ter controle total sobre o Git. \u00c9 necess\u00e1rio ter o Git instalado no seu computador para usar o terminal com o GitHub.</p>"},{"location":"aula01/conteudo/#github-desktop","title":"GitHub Desktop","text":"<p>O GitHub Desktop \u00e9 uma aplica\u00e7\u00e3o gr\u00e1fica gratuita criada pelo GitHub para facilitar o uso do Git e a intera\u00e7\u00e3o com o GitHub. \u00c9 ideal para quem prefere uma interface gr\u00e1fica, mas n\u00e3o quer usar uma IDE.</p> <ul> <li>Clonar Reposit\u00f3rios: Assim como nas outras op\u00e7\u00f5es, voc\u00ea pode clonar um reposit\u00f3rio GitHub localmente atrav\u00e9s de um simples clique.</li> <li>Commit e Push: Com o GitHub Desktop, voc\u00ea pode ver uma visualiza\u00e7\u00e3o das mudan\u00e7as e fazer commits e push de forma intuitiva.</li> <li>Branches e Merge: Permite criar, trocar e mesclar branches visualmente, facilitando o gerenciamento de diferentes vers\u00f5es do projeto.</li> <li>Sincroniza\u00e7\u00e3o com GitHub: O GitHub Desktop \u00e9 ideal para sincronizar facilmente com o GitHub, enviando (push) e recebendo (pull) mudan\u00e7as.</li> <li>Integra\u00e7\u00e3o com o GitHub: O GitHub Desktop se integra diretamente ao site do GitHub, permitindo visualizar e abrir pull requests diretamente na interface da aplica\u00e7\u00e3o.</li> </ul> <p>O GitHub Desktop \u00e9 uma \u00f3tima op\u00e7\u00e3o para iniciantes ou para quem n\u00e3o quer usar o terminal, mas precisa de um controle maior do Git sem as funcionalidades completas de uma IDE.</p>"},{"location":"aula01/conteudo/#resumo","title":"Resumo","text":"<p>IDE: Ideal para quem quer desenvolver e gerenciar o Git diretamente do editor, com controle visual e integra\u00e7\u00e3o de desenvolvimento.</p> <p>Terminal: Preferido por usu\u00e1rios avan\u00e7ados que querem controle total e r\u00e1pido sobre os comandos do Git.</p> <p>GitHub Desktop: \u00d3timo para iniciantes e para quem prefere uma GUI leve sem a complexidade de uma IDE completa. Essas tr\u00eas abordagens oferecem flexibilidade para trabalhar com o GitHub de acordo com suas prefer\u00eancias e n\u00edvel de experi\u00eancia com Git.</p>"},{"location":"aula02/apresentacao/","title":"Apresenta\u00e7\u00e3o da Aula","text":"<p>O objetivo desta aula \u00e9 ensinar como trabalhar com reposit\u00f3rios, abordando a cria\u00e7\u00e3o deles e as opera\u00e7\u00f5es essenciais para gerenci\u00e1-los. </p>"},{"location":"aula02/apresentacao/#ministrantes","title":"Ministrantes","text":"Papel Apresenta\u00e7\u00e3o Nome Professora Bruna B\u00f6ch Professora Matheus de Moraes Moderadores Eduardo, Diego e Nicoly <p>Note</p> <p>No nome de cada professor/moderador est\u00e1 o link para o LinkedIn deles, caso queiram se conectar &lt;3 </p>"},{"location":"aula02/apresentacao/#ferramentas-necessarias","title":"Ferramentas Necess\u00e1rias","text":"<p>Para que o aproveitamento da aula seja o m\u00e1ximo, \u00e9 necess\u00e1rio que o aluno acompanhe as pr\u00e1ticas que ser\u00e3o realizadas. Assim, sugerimos que o aluno possua as seguintes ferramentas durante a aula:</p> <ul> <li>Computador/Notebook;</li> <li>Internet;</li> <li>Conta no GitHub;</li> <li>Aplicativos instalados na aula 1: VSCode, Git e GitHub Desktop.</li> </ul>"},{"location":"aula02/conteudo/","title":"Conte\u00fado","text":"<p>Clique aqui para acessar a grava\u00e7\u00e3o da aula Trabalhando com Reposit\u00f3rios</p>"},{"location":"aula02/conteudo/#criando-um-repositorio","title":"Criando um Reposit\u00f3rio","text":"<p>Um reposit\u00f3rio \u00e9 o elemento mais b\u00e1sico do GitHub. \u00c9 um lugar onde voc\u00ea pode armazenar seu c\u00f3digo, seus arquivos e o hist\u00f3rico de revis\u00e3o de cada arquivo. Os reposit\u00f3rios podem ter v\u00e1rios colaboradores e podem ser p\u00fablicos, internos ou particulares. </p> <p>Para criar um novo reposit\u00f3rio, v\u00e1 para este link ou, no canto superior direito de qualquer p\u00e1gina do GitHub, selecione o \"+\" e clique em Novo reposit\u00f3rio.</p> <p></p> <p>Em seguida, siga os passos abaixo:</p> <ol> <li> <p>Digite um nome breve para o reposit\u00f3rio. Por exemplo, \"ol\u00e1 mundo\".</p> </li> <li> <p>Opcionalmente, adicione uma descri\u00e7\u00e3o do reposit\u00f3rio. Por exemplo, \"Meu primeiro reposit\u00f3rio no GitHub\".</p> </li> <li> <p>Escolha uma visibilidade do reposit\u00f3rio. Para obter mais informa\u00e7\u00f5es, confira este link do GitHub Docs.</p> </li> <li> <p>Selecione Inicializar este reposit\u00f3rio com um README.</p> </li> <li> <p>Clique em Criar reposit\u00f3rio.</p> </li> </ol> <p>Parab\u00e9ns! Voc\u00ea criou seu primeiro reposit\u00f3rio! &lt;3.</p> <p></p> <p>Tip</p> <p>Caso queira aprender mais sobre cria\u00e7\u00e3o de reposit\u00f3rios, acesse este link.</p>"},{"location":"aula02/conteudo/#operacoes-git","title":"Opera\u00e7\u00f5es Git","text":""},{"location":"aula02/conteudo/#clone","title":"Clone","text":"<p>Ao criar um reposit\u00f3rio no GitHub, ele existir\u00e1 como um reposit\u00f3rio remoto. \u00c9 poss\u00edvel clonar o reposit\u00f3rio para criar uma c\u00f3pia local no seu computador e sincronizar entre os dois locais.</p> <p>Ou seja, o clone \u00e9 uma funcionalidade que permite baixar uma c\u00f3pia completa dos dados de um reposit\u00f3rio de GitHub.com, incluindo todas as vers\u00f5es de cada arquivo e pasta.</p> <p>Quer saber mais sobre clonar reposit\u00f3rios e como isso pode ser feito? Acesse este link do GitHub Docs.</p>"},{"location":"aula02/conteudo/#fork","title":"Fork","text":"<p>O Fork permite a cria\u00e7\u00e3o de um novo reposit\u00f3rio que compartilha configura\u00e7\u00f5es de c\u00f3digo e visibilidade com o reposit\u00f3rio \"upstream\" original.</p> <p>Quer saber mais sobre Fork e como isso pode ser feito? Acesse este link do GitHub Docs.</p> <p>Warning</p> <p>Aten\u00e7\u00e3o! </p> <p>Durante a aula foi realizado um Fork deste reposit\u00f3rio. Essa etapa foi importante pois criamos um novo reposit\u00f3rio com arquivos que ser\u00e3o utilizados nas pr\u00f3ximas aulas. Assim, caso tenha pardido esta aula ou n\u00e3o tenha conseguido acompanhar, assista a grava\u00e7\u00e3o que est\u00e1 dispon\u00edvel no in\u00edcio desta p\u00e1gina.</p>"},{"location":"aula02/conteudo/#fetch","title":"Fetch","text":"<p>O Fetch \u00e9 um comando do Git que baixa as atualiza\u00e7\u00f5es e mudan\u00e7as feitas no reposit\u00f3rio remoto (como novos commits, branches ou tags) para o reposit\u00f3rio local, sem integr\u00e1-las ao branch ativo. Ele \u00e9 especialmente \u00fatil para visualizar o que mudou no reposit\u00f3rio remoto antes de aplicar essas mudan\u00e7as no branch local.</p> <p>Ao usar git fetch, o Git atualiza as refer\u00eancias do reposit\u00f3rio remoto no seu ambiente local, permitindo que voc\u00ea veja as novas atualiza\u00e7\u00f5es ou commits que foram adicionados ao reposit\u00f3rio remoto. Essas mudan\u00e7as ficam dispon\u00edveis para que voc\u00ea possa analis\u00e1-las e decidir se deseja incorpor\u00e1-las ao seu branch por meio de um comando como git merge ou git rebase.</p>"},{"location":"aula02/conteudo/#pull","title":"Pull","text":"<p>O comando Pull no Git \u00e9 usado para sincronizar o reposit\u00f3rio local com as \u00faltimas mudan\u00e7as do reposit\u00f3rio remoto, trazendo novos commits e altera\u00e7\u00f5es diretamente para o seu branch atual. Ele funciona como uma combina\u00e7\u00e3o de dois comandos: git fetch (que baixa as mudan\u00e7as do reposit\u00f3rio remoto) seguido de git merge (que aplica essas mudan\u00e7as no branch atual). Assim, git pull baixa e integra automaticamente as atualiza\u00e7\u00f5es do reposit\u00f3rio remoto.</p>"},{"location":"aula02/conteudo/#funcionamento-do-git-pull","title":"Funcionamento do git pull","text":"<p>Quando voc\u00ea executa git pull, o Git:</p> <ul> <li> <p>Baixa (fetch) as mudan\u00e7as do reposit\u00f3rio remoto.</p> </li> <li> <p>Faz um merge dessas mudan\u00e7as no seu branch atual, integrando-as ao seu hist\u00f3rico.</p> </li> </ul> <p>Info</p> <p>Se houver conflitos entre as mudan\u00e7as do reposit\u00f3rio remoto e as mudan\u00e7as locais, o Git solicitar\u00e1 que voc\u00ea resolva esses conflitos antes de concluir o merge.</p> <p>Veja a imagem abaixo que resume e compara os dois \u00faltimos comandos: fetch e pull</p> <p></p>"},{"location":"aula02/conteudo/#push","title":"Push","text":"<p>O comando Push no Git \u00e9 utilizado para enviar commits feitos no reposit\u00f3rio local para o reposit\u00f3rio remoto, atualizando-o com as mudan\u00e7as feitas localmente. Em outras palavras, ele \"empurra\" as altera\u00e7\u00f5es do seu reposit\u00f3rio local para um branch espec\u00edfico no reposit\u00f3rio remoto, permitindo que outras pessoas ou sistemas possam acessar as novas atualiza\u00e7\u00f5es.</p>"},{"location":"aula02/conteudo/#funcionamento-do-git-push","title":"Funcionamento do git push","text":"<p>Quando voc\u00ea executa git push, o Git:</p> <ul> <li> <p>Identifica os commits que existem no reposit\u00f3rio local, mas n\u00e3o no reposit\u00f3rio remoto.</p> </li> <li> <p>Envia esses commits para o branch correspondente no reposit\u00f3rio remoto, sincronizando-o com o seu reposit\u00f3rio local.</p> </li> </ul> <p>Info</p> <p>\u00c9 importante lembrar que, para executar um git push, voc\u00ea precisa ter permiss\u00e3o para modificar o reposit\u00f3rio remoto. Al\u00e9m disso, voc\u00ea deve estar sincronizado com as mudan\u00e7as do remoto (por exemplo, usando git pull) para evitar conflitos.</p>"},{"location":"aula02/conteudo/#markdown","title":"Markdown","text":"<p>Outra ferramenta que exploramos durante a aula \u00e9 a linguagem de marca\u00e7\u00e3o Markdown.</p> <p>Essa linguagem permite adicionar formata\u00e7\u00e3o, links e imagens sem a necessidade de usar marca\u00e7\u00f5es mais complexas, como o HTML. </p> <p>O Markdown \u00e9 baseado em linguagens de marca\u00e7\u00e3o anteriores, como setext, Textile e reStructuredText. Foi criado pelo blogueiro de tecnologia John Gruber e pelo programador Aaron Swartz. </p> <p>O Markdown \u00e9 utilizado em v\u00e1rios sites, como o GitHub. Tamb\u00e9m \u00e9 muito utilizada em arquivos do tipo README.</p> <p>Confira este site com algumas dicas com rela\u00e7\u00e3o ao uso do Markdown.</p>"},{"location":"aula02/conteudo/#readme","title":"README","text":"<p>Voc\u00ea pode adicionar um arquivo README ao seu reposit\u00f3rio para informar outras pessoas por que seu projeto \u00e9 \u00fatil, o que elas podem fazer com o projeto e como elas podem us\u00e1-lo.</p> <p>Este arquivo, junto com uma licen\u00e7a de reposit\u00f3rio, um arquivo de cita\u00e7\u00e3o, diretrizes de contribui\u00e7\u00e3o e um c\u00f3digo de conduta, comunica as expectativas do projeto e ajuda voc\u00ea a gerenciar contribui\u00e7\u00f5es.</p> <p>Veja abaixo um exemplo de README e como ele fica no reposit\u00f3rio:</p> <p></p> <p>Clique aqui para ver o README acima completo.</p> <p>Tip</p> <p>Veja este link do GitHub Docs para saber mais detalhes sobre README.</p>"},{"location":"aula02/conteudo/#preparacao-para-a-github-page","title":"Prepara\u00e7\u00e3o para a GitHub Page","text":"<p>Com o intuito de j\u00e1 irmos deixando tudo organizado para a nossa GitHub Page, precisamos realizar mais alguns passos.</p> <p>Nesta aula, iremos baixar o Python</p> <p></p> <p>Note</p> <p>Na aula 4 iremos nos aprofundar no uso e explica\u00e7\u00e3o dessa ferramenta.</p> <p>Assim, siga os passos abaixo para realizar a instala\u00e7\u00e3o:</p> <ol> <li> <p>Clique neste link para ser redirecionado ao site do Python.</p> </li> <li> <p>Clique no bot\u00e3o abaixo da frase \"Download the latest version for Windows\", caso o seu sistema operacional seja Windows. Caso voc\u00ea possua outro sistema operacional, clique nos links fornecidos abaixo do bot\u00e3o e realize a instala\u00e7\u00e3o de acordo com o seu sistema.</p> </li> </ol> <p></p> <p>Tip</p> <p>Para instalar a ferramenta da forma que precisamos, \u00e9 importante que, na hora de instalar, a op\u00e7\u00e3o \"Customize installation\" seja selecionada.</p> <p></p> <p>Lembre-se de, durante a instala\u00e7\u00e3o, deixar as seguintes op\u00e7\u00f5es selecionadas:</p> <p> </p> <p>Ap\u00f3s intalar o Python, utilize este comando no seu terminal:</p> <p></p> <p>Ap\u00f3s este passo, voc\u00ea finalizou a instala\u00e7\u00e3o necess\u00e1ria! :)</p>"},{"location":"aula03/apresentacao/","title":"Apresenta\u00e7\u00e3o da Aula","text":"<p>O objetivo desta aula \u00e9 ensinar como trabalhar de forma colaborativa em reposit\u00f3rios, abordando o uso de gitflow, pull requests e issues. Ser\u00e1 explicado como utilizar o Gitflow para gerenciar diferentes fases do desenvolvimento, criar pull requests para revis\u00f5es e valida\u00e7\u00e3o de c\u00f3digo, e gerenciar issues para rastrear problemas e organizar tarefas. Esses conceitos s\u00e3o essenciais para otimizar o fluxo de trabalho em equipe e garantir uma comunica\u00e7\u00e3o eficaz dentro de um projeto.</p>"},{"location":"aula03/apresentacao/#ministrantes","title":"Ministrantes","text":"Papel Apresenta\u00e7\u00e3o Nome Professora Guilherme Xavier Professora Matheus de Moraes Moderadores Eduardo, Diego e Nicoly <p>Note</p> <p>No nome de cada professor/moderador est\u00e1 o link para o LinkedIn deles, caso queiram se conectar &lt;3 </p>"},{"location":"aula03/apresentacao/#ferramentas-necessarias","title":"Ferramentas Necess\u00e1rias","text":"<p>Para que o aproveitamento da aula seja o m\u00e1ximo, \u00e9 necess\u00e1rio que o aluno acompanhe as pr\u00e1ticas que ser\u00e3o realizadas. Assim, sugerimos que o aluno possua as seguintes ferramentas durante a aula:</p> <ul> <li>Computador/Notebook;</li> <li>Internet;</li> <li>Conta no GitHub;</li> <li>Aplicativos instalados na aula 1: VSCode, Git e GitHub Desktop.</li> <li>Prepara\u00e7\u00e3o para a GitHub Page que foi realizada na \u00faltima aula: instala\u00e7\u00e3o do Python e fork deste reposit\u00f3rio.</li> </ul>"},{"location":"aula03/conteudo/","title":"Conte\u00fado","text":"<p>Clique aqui para acessar a grava\u00e7\u00e3o da aula Colabora\u00e7\u00e3o e Fluxo de Trabalho</p> <p>Note</p> <p>Infelizmente, n\u00e3o conseguimos gravar o in\u00edcio desta aula. Assim, o conte\u00fado come\u00e7a a partir do t\u00f3pico \"commits\" na grava\u00e7\u00e3o.</p> <p>Caso tenham alguma d\u00favida a respeito dos primeiros t\u00f3picos, nos chamem na comunidade do WhatsApp para ajudarmos voc\u00eas. &lt;3</p>"},{"location":"aula03/conteudo/#git-flow","title":"Git Flow","text":"<p>O Git Flow \u00e9 uma metodologia de gerenciamento de ramifica\u00e7\u00f5es (branches) em projetos que utilizam o sistema de controle de vers\u00f5es Git. Foi introduzida por Vincent Driessen em 2010 e \u00e9 amplamente utilizada para gerenciar o ciclo de desenvolvimento de software, especialmente em equipes que trabalham de forma colaborativa. A ideia central \u00e9 definir um conjunto de regras para criar, gerenciar e mesclar branches, facilitando o fluxo de trabalho e a organiza\u00e7\u00e3o do c\u00f3digo.</p> <p></p>"},{"location":"aula03/conteudo/#como-o-git-flow-funciona","title":"Como o Git Flow funciona?","text":"<p>O Git Flow prop\u00f5e o uso de 5 branches principais, cada uma com uma fun\u00e7\u00e3o espec\u00edfica:</p> <ol> <li>Main (ou master):</li> </ol> <p>Cont\u00e9m o c\u00f3digo da vers\u00e3o est\u00e1vel e j\u00e1 em produ\u00e7\u00e3o. Qualquer commit nessa branch deve ser uma vers\u00e3o pronta para ser lan\u00e7ada.</p> <ol> <li>Develop:</li> </ol> <p>Onde o desenvolvimento ativo acontece. Todos os recursos e funcionalidades s\u00e3o integrados aqui antes de serem lan\u00e7ados.</p> <p>Serve como a base para as branches de feature, release e hotfix.</p> <ol> <li>Feature branches:</li> </ol> <p>Usadas para desenvolver novas funcionalidades. Derivam da branch develop e, ao serem conclu\u00eddas, s\u00e3o mescladas de volta nela.</p> <p>Nomenclatura: feature/nome-da-funcionalidade.</p> <ol> <li>Release branches:</li> </ol> <p>Usadas para preparar uma nova vers\u00e3o que ser\u00e1 lan\u00e7ada. Derivam de develop e, quando prontas, s\u00e3o mescladas tanto em main quanto em develop.</p> <p>Nomenclatura: release/x.y.z.</p> <ol> <li>Hotfix branches:</li> </ol> <p>Usadas para corrigir problemas cr\u00edticos na produ\u00e7\u00e3o. Derivam da main e, quando conclu\u00eddas, s\u00e3o mescladas de volta tanto em main quanto em develop.</p> <p>Nomenclatura: hotfix/x.y.z.</p>"},{"location":"aula03/conteudo/#componentes-do-git-flow","title":"Componentes do Git Flow","text":"<p>Para nos aprofundarmos um pouquinho mais no conte\u00fado, segue abaixo alguns componentes do Git Flow:</p>"},{"location":"aula03/conteudo/#file-status","title":"File Status","text":"<p>No Git Flow, o conceito de \"file status\" refere-se ao estado dos arquivos no seu reposit\u00f3rio Git. Esse status indica o que o Git reconhece como altera\u00e7\u00f5es em rela\u00e7\u00e3o \u00e0 vers\u00e3o anterior. Em termos gerais, o estado de um arquivo pode ser:</p> <ul> <li>Untracked (N\u00e3o rastreado);</li> <li>Unmodified (N\u00e3o modificado);</li> <li>Modified (Modificado);</li> <li>Staged (Preparado para commit)</li> </ul> <p>Abaixo vamos detalhar cada um destes estados, explicando o ciclo de vida de um arquivo no contexto do Git Flow.</p> Untracked (N\u00e3o rastreado) <p>Arquivos que o Git ainda n\u00e3o est\u00e1 monitorando. Quando voc\u00ea cria um novo arquivo, ele come\u00e7a como untracked.</p> <p>Para come\u00e7ar a rastrear esse arquivo, voc\u00ea precisa usar o comando:</p> <p><code>git add &lt;arquivo&gt;</code></p> Unmodified (N\u00e3o modificado) <p>Arquivos que j\u00e1 est\u00e3o sendo rastreados e n\u00e3o foram alterados desde o \u00faltimo commit. O Git considera esses arquivos sincronizados com o reposit\u00f3rio.</p> <p>N\u00e3o h\u00e1 necessidade de qualquer a\u00e7\u00e3o se voc\u00ea n\u00e3o fez altera\u00e7\u00f5es neles.</p> Modified (Modificado) <p>Arquivos que foram alterados, mas as mudan\u00e7as ainda n\u00e3o foram adicionadas \u00e0 \u00e1rea de stage.</p> <p>Para ver quais arquivos est\u00e3o modificados, voc\u00ea pode usar:</p> <p><code>git status</code></p> <p>Para mover um arquivo modificado para a \u00e1rea de stage (preparando-o para commit):</p> <p><code>git add &lt;arquivo&gt;</code></p> Staged (Preparado para commit) <p>Arquivos que foram modificados e adicionados \u00e0 \u00e1rea de stage com o comando git add.</p> <p>Esses arquivos est\u00e3o prontos para serem salvos no pr\u00f3ximo commit.</p> <p>Para fazer o commit das altera\u00e7\u00f5es staged:</p> <p><code>git commit -m \"Mensagem do commit\"</code></p> <p>Veja este resumo:</p> <p></p>"},{"location":"aula03/conteudo/#commits","title":"Commits","text":"<p>Um commit no Git \u00e9 como uma \"fotografia\" do estado atual do seu projeto. Ele registra todas as altera\u00e7\u00f5es feitas nos arquivos rastreados, criando um ponto no hist\u00f3rico do reposit\u00f3rio que pode ser recuperado posteriormente. Cada commit tem uma mensagem descritiva associada, que explica as altera\u00e7\u00f5es feitas, facilitando o entendimento do hist\u00f3rico do projeto.</p> <p>Em termos simples, um commit \u00e9:</p> <ul> <li>Um ponto de restaura\u00e7\u00e3o no desenvolvimento, permitindo voltar a estados anteriores, se necess\u00e1rio.</li> <li>Uma maneira de documentar seu trabalho e comunicar mudan\u00e7as para outros desenvolvedores.</li> <li>Um elemento b\u00e1sico para o versionamento e a colabora\u00e7\u00e3o em projetos.</li> </ul> <p>Como Fazer um Commit no Git?</p> <p></p>"},{"location":"aula03/conteudo/#branches","title":"Branches","text":"<p>No Git, uma branch (ramifica\u00e7\u00e3o) \u00e9 uma linha independente de desenvolvimento. Imagine que uma branch \u00e9 como um caminho paralelo ao \"tronco\" principal do seu projeto, permitindo que voc\u00ea trabalhe em novas funcionalidades, corre\u00e7\u00f5es de bugs ou experimentos, sem interferir diretamente no c\u00f3digo existente. Cada branch possui seu pr\u00f3prio hist\u00f3rico de commits, que pode eventualmente ser mesclado (merged) de volta ao tronco principal ou descartado, dependendo da necessidade.</p> <p>Em outras palavras, branchs ajudam a isolar mudan\u00e7as para que voc\u00ea possa trabalhar em v\u00e1rias tarefas ao mesmo tempo, sem interferir nas partes est\u00e1veis do seu projeto.</p> <p>Acesse este link do site do git para saber mais.</p> <p></p>"},{"location":"aula03/conteudo/#trabalhando-com-colaboracao","title":"Trabalhando com Colabora\u00e7\u00e3o","text":"<p>No desenvolvimento de software, colabora\u00e7\u00e3o \u00e9 essencial, especialmente em projetos de c\u00f3digo aberto ou em equipes distribu\u00eddas. </p> <p>O Git, junto com a plataforma GitHub, fornece v\u00e1rias ferramentas que facilitam essa colabora\u00e7\u00e3o. </p> <p>Abaixo, vamos detalhar dois dos principais mecanismos: Pull Requests e Issues, que ajudam equipes a colaborar de forma eficiente, revisando c\u00f3digo, discutindo melhorias e rastreando problemas.</p>"},{"location":"aula03/conteudo/#pull-requests","title":"Pull Requests","text":"<p>Pull Requests (PRs) s\u00e3o uma forma de propor altera\u00e7\u00f5es em um projeto, permitindo que outros membros da equipe revisem e aprovem essas mudan\u00e7as antes que elas sejam mescladas na branch principal (geralmente main ou develop). </p> <p>Esse processo \u00e9 especialmente \u00fatil em projetos colaborativos e em c\u00f3digo aberto, pois garante que o c\u00f3digo seja revisado e testado antes de ser integrado.</p>"},{"location":"aula03/conteudo/#como-funcionam-os-pull-requests","title":"Como Funcionam os Pull Requests:","text":"1. Cria\u00e7\u00e3o da Branch: <p>O colaborador cria uma branch separada para trabalhar em uma nova funcionalidade ou corre\u00e7\u00e3o de bug.</p> <p><code>git checkout -b feature/minha-nova-funcionalidade</code></p> 2. Fazer Altera\u00e7\u00f5es e Commits:\" <p>O colaborador faz altera\u00e7\u00f5es no c\u00f3digo e faz os commits necess\u00e1rios.</p> <p><code>git commit -m \"Implementa nova funcionalidade\"</code></p> 3. Enviar a Branch para o Reposit\u00f3rio Remoto: <p>Quando estiver pronto, ele faz o push da branch para o reposit\u00f3rio remoto.</p> <p><code>git push origin feature/minha-nova-funcionalidade</code></p> 4. Abrir um Pull Request: <p>O colaborador abre um Pull Request na plataforma de controle de vers\u00e3o (ex.: GitHub), selecionando a branch que deseja mesclar.</p> <p>Inclui uma descri\u00e7\u00e3o detalhada das mudan\u00e7as, o motivo por tr\u00e1s delas e qualquer informa\u00e7\u00e3o adicional necess\u00e1ria para revis\u00e3o.</p> 5. Revis\u00e3o e Aprova\u00e7\u00e3o: <p>Outros desenvolvedores revisam o c\u00f3digo, fazem coment\u00e1rios, sugerem altera\u00e7\u00f5es ou aprovam o PR.</p> <p>Caso necess\u00e1rio, o autor pode fazer ajustes e atualizar o PR com novos commits.</p> 6. Mesclar o PR: <p>Ap\u00f3s a aprova\u00e7\u00e3o, o PR \u00e9 mesclado na branch principal.</p> <p>Dependendo das pol\u00edticas do projeto, isso pode ser feito automaticamente ou por um maintainer.</p> <p>Vantagens dos Pull Requests:</p> <ul> <li>Revis\u00e3o de c\u00f3digo antes de integrar mudan\u00e7as;</li> <li>Discuss\u00e3o colaborativa para melhorar a qualidade do c\u00f3digo;</li> <li>Hist\u00f3rico claro de altera\u00e7\u00f5es e melhorias.</li> </ul>"},{"location":"aula03/conteudo/#issues","title":"Issues","text":"<p>Issues s\u00e3o uma forma de rastrear problemas, bugs, sugest\u00f5es de melhorias e tarefas em um projeto. Elas s\u00e3o especialmente \u00fateis para documentar o que precisa ser feito, tanto por desenvolvedores quanto por outros membros da equipe, como gerentes de projeto ou designers.</p> <p>Clique nessa documenta\u00e7\u00e3o do GitHub Docs para saber mais sobre o que \u00e9 uma Issue.</p>"},{"location":"aula03/conteudo/#como-criar-uma-issue","title":"Como criar uma Issue?","text":"<p>Clique nessa documenta\u00e7\u00e3o do GitHub Docs para saber como criar uma Issue.</p> <p>Vantagens do Uso de Issues:</p> <ul> <li>Rastreiam bugs e tarefas de forma organizada;</li> <li>Facilitam a comunica\u00e7\u00e3o entre os membros da equipe;</li> <li>Ajudam a priorizar o trabalho e gerenciar o backlog do projeto.</li> </ul>"},{"location":"aula04/apresentacao/","title":"Apresenta\u00e7\u00e3o da Aula","text":"<p>O objetivo desta aula \u00e9 apresentar o recurso de GitHub Pages e auxiliar os alunos a aplic\u00e1-las em seus reposit\u00f3rios.</p>"},{"location":"aula04/apresentacao/#ministrantes","title":"Ministrantes","text":"Papel Apresenta\u00e7\u00e3o Nome Professora Amanda de Oliveira Professora Bruna Motta Moderadores Eduardo, Diego e Nicoly <p>Note</p> <p>No nome de cada professor/moderador est\u00e1 o link para o LinkedIn deles, caso queiram se conectar &lt;3 </p>"},{"location":"aula04/apresentacao/#ferramentas-necessarias","title":"Ferramentas Necess\u00e1rias","text":"<p>Para que o aproveitamento da aula seja o m\u00e1ximo, \u00e9 necess\u00e1rio que o aluno acompanhe as pr\u00e1ticas que ser\u00e3o realizadas. Assim, sugerimos que o aluno possua as seguintes ferramentas durante a aula:</p> <ul> <li>Computador/Notebook;</li> <li>Internet;</li> <li>Conta no GitHub;</li> <li>Aplicativos instalados na aula 1: VSCode, Git e GitHub Desktop.</li> <li>Prepara\u00e7\u00e3o para a GitHub Page que foi realizada na \u00faltima aula: instala\u00e7\u00e3o do Python e fork deste reposit\u00f3rio.</li> </ul>"},{"location":"aula04/conteudo/","title":"Conte\u00fado","text":"<p>Clique aqui para acessar a grava\u00e7\u00e3o da aula GitHub Pages</p>"},{"location":"trabalho/informacoes/","title":"Trabalho Final do Curso","text":"<p>Para atingir a certifica\u00e7\u00e3o do curso, \u00e9 importante que voc\u00ea tenha participado de, ao menos, 3 aulas.</p> <p>Al\u00e9m disso, um trabalho final (link de um GitHub Page em forma de Portfolio) que deve ser entregue at\u00e9 dia 22 de Novembro de 2024 (sexta-feira). Veja abaixo mais detalhes do trabalho.</p> <p></p> <p></p> <p></p>"},{"location":"trabalho/informacoes/#entrega","title":"Entrega","text":"<p>Onde entregar o trabalho?</p> <p>Entregue o trabalho atrav\u00e9s deste formul\u00e1rio.</p>"}]}